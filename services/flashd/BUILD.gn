# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

FLASHD_PATH = "//base/update/updater/services/flashd"
HDC_PATH = "//developtools/hdc/src"

common_sources = [
  "${HDC_PATH}/common/async_cmd.cpp",
  "${HDC_PATH}/common/auth.cpp",
  "${HDC_PATH}/common/base.cpp",
  "${HDC_PATH}/common/channel.cpp",
  "${HDC_PATH}/common/debug.cpp",
  "${HDC_PATH}/common/file.cpp",
  "${HDC_PATH}/common/file_descriptor.cpp",
  "${HDC_PATH}/common/forward.cpp",
  "${HDC_PATH}/common/session.cpp",
  "${HDC_PATH}/common/task.cpp",
  "${HDC_PATH}/common/tcp.cpp",
  "${HDC_PATH}/common/transfer.cpp",
  "${HDC_PATH}/common/usb.cpp",
]

config("flashd_hdc_config") {
  include_dirs = [ "${FLASHD_PATH}/common" ]
  cflags_cc = [ "-std=c++17" ]
}

ohos_source_set("flashd_deamon") {
  sources = [
    "${FLASHD_PATH}/daemon/daemon.cpp",
    "${FLASHD_PATH}/daemon/daemon_unity.cpp",
    "${HDC_PATH}/daemon/daemon_app.cpp",
    "${HDC_PATH}/daemon/daemon_forward.cpp",
    "${HDC_PATH}/daemon/daemon_tcp.cpp",
    "${HDC_PATH}/daemon/daemon_usb.cpp",
    "${HDC_PATH}/daemon/jdwp.cpp",
    "${HDC_PATH}/daemon/shell.cpp",
  ]

  sources += common_sources

  defines = [
    "HARMONY_PROJECT",
    "HDC_SUPPORT_FLASHD",
  ]

  configs = [ ":flashd_hdc_config" ]

  deps = [
    "//third_party/libuv:uv_static",
    "//third_party/lz4:liblz4_static",
    "//third_party/openssl:libcrypto_static",
    "//utils/native/base:utils",
  ]
  deps += [ "//developtools/hdc:hdc_hash_gen" ]
  if (use_musl) {
    external_deps = [
      "init:libbegetutil",
      "startup_l2:syspara",
    ]
  }

  include_dirs = [
    "${HDC_PATH}/daemon",
    "${HDC_PATH}/common",
    "//base/update/updater/services/flashd",
    "//base/update/updater/services/flashd/daemon",
    "//base/update/updater/services/flashd/common",
    "//base/update/updater/services/flashd/host",
    "//third_party/bounds_checking_function/include",
    "//third_party/lz4/lib",
    "//third_party/openssl/include",
    "//third_party/libuv",
  ]

  if (!(is_mingw || is_mac) && build_selinux) {
    deps += [ "//third_party/selinux:libselinux" ]
    include_dirs += [ "//third_party/selinux/libselinux/include" ]
    defines += [ "SURPPORT_SELINUX" ]
  }

  subsystem_name = "updater"
  part_name = "updater"
}

ohos_static_library("libflashd") {
  sources = [
    "//base/update/updater/services/flashd/blockdevice.cpp",
    "//base/update/updater/services/flashd/daemon/daemon_updater.cpp",
    "//base/update/updater/services/flashd/daemon/flashd_main.cpp",
    "//base/update/updater/services/flashd/flash_service.cpp",
    "//base/update/updater/services/flashd/partition.cpp",
    "//base/update/updater/services/updater_binary/update_image_block.cpp",
    "//base/update/updater/services/updater_binary/update_partitions.cpp",
    "//base/update/updater/services/updater_binary/update_processor.cpp",
  ]

  defines = [
    "HDC_SUPPORT_FLASHD",
    "HARMONY_PROJECT",
  ]

  deps = [
    ":flashd_deamon",
    "//base/update/updater/interfaces/kits/misc_info:libmiscinfo",
    "//base/update/updater/services/applypatch:libapplypatch",
    "//base/update/updater/services/diffpatch/patch:libpatch",
    "//base/update/updater/services/fs_manager:libfsmanager",
    "//base/update/updater/services/log:libupdaterlog",
    "//base/update/updater/services/package:libupdaterpackage",
    "//base/update/updater/services/script:libupdaterscript",
    "//base/update/updater/utils:libutils",
    "//third_party/bzip2:libbz2",
    "//third_party/cJSON:cjson_static",
    "//third_party/libuv:uv_static",
    "//third_party/lz4:liblz4_static",
    "//third_party/openssl:libcrypto_static",
    "//third_party/zlib:libz",
    "//utils/native/base:utils",
  ]

  include_dirs = [
    "${HDC_PATH}/daemon",
    "${HDC_PATH}/common",
    "//base/update/updater/services",
    "//base/update/updater/services/flashd",
    "//base/update/updater/services/flashd/daemon",
    "//base/update/updater/services/flashd/common",
    "//base/update/updater/interfaces/kits/include",
    "//base/update/updater/services/include/package",
    "//base/update/updater/services/include/script",
    "//base/update/updater/services/include/log",
    "//base/update/updater/services/include",
    "//base/update/updater/utils/include",
    "//third_party/bounds_checking_function/include",
    "//third_party/cJSON",
    "//third_party/openssl/include",
    "//third_party/lz4/lib",
    "//third_party/libuv",
  ]

  external_deps = [ "init:libbegetutil" ]

  part_name = "updater"
}

ohos_executable("ohflash") {
  libs = []
  configs = [ ":flashd_hdc_config" ]
  defines = [
    "HDC_HOST",
    "HARMONY_PROJECT",
  ]
  if (is_mac) {
    defines += [ "HOST_MAC" ]
  }
  cflags_cc = [
    "-Wno-error",
    "-Wno-error=unused-variable",
    "-Wno-unused-variable",
  ]
  sources = [
    "${FLASHD_PATH}/host/client.cpp",
    "${FLASHD_PATH}/host/host_updater.cpp",
    "${FLASHD_PATH}/host/main.cpp",
    "${FLASHD_PATH}/host/server.cpp",
    "${FLASHD_PATH}/host/server_for_client.cpp",
    "${FLASHD_PATH}/host/translate.cpp",
    "${HDC_PATH}/host/host_app.cpp",
    "${HDC_PATH}/host/host_forward.cpp",
    "${HDC_PATH}/host/host_tcp.cpp",
    "${HDC_PATH}/host/host_unity.cpp",
    "${HDC_PATH}/host/host_usb.cpp",
  ]
  sources += common_sources

  deps = [
    "//third_party/bounds_checking_function:libsec_static",
    "//third_party/libusb:libusb",
    "//third_party/libuv:uv_static",
    "//third_party/lz4:liblz4_static",
    "//third_party/openssl:libcrypto_static",
  ]

  deps += [ "//third_party/libusb:libusb" ]
  deps += [ "//developtools/hdc:hdc_hash_gen" ]
  include_dirs = [
    "${FLASHD_PATH}/host",
    "${HDC_PATH}/host",
    "${FLASHD_PATH}/common",
    "${HDC_PATH}/common",
    "//third_party/bounds_checking_function/include",
    "//third_party/lz4/lib",
    "//third_party/openssl/include",
    "//third_party/libuv",
  ]

  if (!(is_mingw || is_mac) && build_selinux) {
    deps += [ "//third_party/selinux:libselinux" ]
    include_dirs += [ "//third_party/selinux/libselinux/include" ]
    defines += [ "SURPPORT_SELINUX" ]
  }

  if (is_mingw) {
    static_link = true
    defines += [ "_WIN32" ]
    defines += [ "WIN32_LEAN_AND_MEAN" ]
    libs += [ "setupapi" ]
  }

  if (is_linux) {
    static_link = true
    deps += [ "//third_party/openssl:libcrypto_static" ]
  }

  subsystem_name = "updater"
  part_name = "updater"
}

group("flashhost_target_standard") {
  deps = [ ":ohflash" ]
}

group("flashhost_target_standard_linux") {
  deps = [ ":ohflash(//build/toolchain/linux:clang_x64)" ]
}

group("flashhost_target_standard_mingw") {
  deps = [ ":ohflash(//build/toolchain/mingw:mingw_x86_64)" ]
}

group("flashhost_target_standard_all") {
  deps = [
    ":flashhost_target_standard_linux",
    ":flashhost_target_standard_mingw",
  ]
}

group("updater_flashd") {
  deps = [ ":libflashd" ]
}
